namespace JustinWritesCode.Versioning;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using System;

public class VersionManager
{
    public VersionManager(string configuration, string versionsJsonFileName = "Packages/JustinWritesCode.Versions.{0}.json", string versionsPropsFileName = "Packages/JustinWritesCode.Versions.{0}.props")
    {
        Configuration = configuration;
        VersionsJsonFileName = versionsJsonFileName;
        VersionsPropsFileName = versionsPropsFileName;
        if (!File.Exists(VersionsJsonFilePath))
        {
            File.WriteAllText(VersionsJsonFilePath, "{}");
        }
        if (!File.Exists(VersionsPropsFilePath))
        {
            File.WriteAllText(VersionsPropsFilePath, "<Project />");
        }
        Versions = System.Text.Json.JsonSerializer.Deserialize<IDictionary<string, string>>(
        System.IO.File.ReadAllText(VersionsJsonFilePath));
    }

    private void SaveVersions()
    {
        var sortedVersions = Versions.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);
        System.IO.File.WriteAllText(VersionsJsonFilePath, System.Text.Json.JsonSerializer.Serialize(sortedVersions));
        var versionsProps = new XDocument();
        versionsProps.Add(new XComment("<auto-generated />"));
        versionsProps.Add(new XComment("This file is automatically generated by JustinWritesCode.Versioning. Do not edit."));
        var root = new XElement("Project");
        versionsProps.Add(root);
        root.Add(new XElement("PropertyGroup",
            sortedVersions.Select(kvp => new XElement(kvp.Key.Replace(".", "").Replace("-", "") + "Version", kvp.Value))));
        root.Add(new XElement("ItemGroup",
            sortedVersions.Select(kvp =>
                new XElement("PackageReference",
                    new XAttribute("Update", kvp.Key),
                    new XAttribute("Version", $"$({kvp.Key.Replace(".", "").Replace("-", "")}Version)")))));
        versionsProps.Save(VersionsPropsFilePath);
    }

    public string Configuration { get; }
    public string VersionsPropsFileName { get; }
    public string VersionsJsonFileName { get; }
    public string VersionsJsonFilePath => string.Format(Path.Combine(GetPathOfFileAbove("Versions/"), VersionsJsonFileName), Configuration);
    public string VersionsPropsFilePath => string.Format(Path.Combine(GetPathOfFileAbove("Versions/"), VersionsPropsFileName), Configuration);

    public IDictionary<string, string> Versions { get; } = new Dictionary<string, string>();

    public static string GetPathOfFileAbove(string fileName)
    {
        Console.WriteLine($"Looking for {fileName} in {Directory.GetCurrentDirectory()}");
        var currentDirectory = Directory.GetCurrentDirectory();
        var directoryInfo = new DirectoryInfo(currentDirectory);
        var lookingForFile = new FileInfo(Path.Combine(directoryInfo.FullName, fileName));
        var lookingForDirectory = new DirectoryInfo(Path.Combine(directoryInfo.FullName, fileName));
        while (directoryInfo != null && !lookingForFile.Exists && !lookingForDirectory.Exists)
        {
            directoryInfo = directoryInfo.Parent;
            lookingForFile = new FileInfo(Path.Combine(directoryInfo.FullName, fileName));
            lookingForDirectory = new DirectoryInfo(Path.Combine(directoryInfo.FullName, fileName));
        }

        return Path.Combine(directoryInfo.FullName, fileName);
    }

    public static string GetDirectoryNameOfFileAbove(string startingDirectory, string fileName)
    {
        var currentDirectory = startingDirectory;
        var directoryInfo = new DirectoryInfo(currentDirectory);
        var lookingForFile = new FileInfo(Path.Combine(directoryInfo.FullName, fileName));
        var lookingForDirectory = new DirectoryInfo(Path.Combine(directoryInfo.FullName, fileName));
        while (directoryInfo != null && !lookingForFile.Exists && !lookingForDirectory.Exists)
        {
            directoryInfo = directoryInfo.Parent;
            lookingForFile = new FileInfo(Path.Combine(directoryInfo.FullName, fileName));
            lookingForDirectory = new DirectoryInfo(Path.Combine(directoryInfo.FullName, fileName));
        }

        return directoryInfo.FullName;
    }

    public static string GetPathOfRootDirectory(DirectoryInfo currentDirectory, string lookingForDirectoryName, DirectoryInfo lastDirectoryWhereTheThingWasFound = default)
    {
        Console.WriteLine($"Looking for {lookingForDirectoryName} in {currentDirectory.FullName}");
        if (currentDirectory == null)
        {
            return lastDirectoryWhereTheThingWasFound.FullName;
        }
        else if (currentDirectory.Name == lookingForDirectoryName)
        {
            return currentDirectory.FullName;
        }
        else if (currentDirectory.GetFileSystemInfos(lookingForDirectoryName).Any())
        {
            lastDirectoryWhereTheThingWasFound = new DirectoryInfo(currentDirectory.GetFileSystemInfos(lookingForDirectoryName).First().FullName);
        }
        return GetPathOfRootDirectory(currentDirectory.Parent, lookingForDirectoryName, currentDirectory);
    }

    public string GetVersion(string packageName)
        => Versions[packageName];

    public void SetVersion(string packageName, string version)
    {
        Versions[packageName] = version;
        SaveVersions();
    }
}
